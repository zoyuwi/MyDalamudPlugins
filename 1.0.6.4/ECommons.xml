<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ECommons</name>
    </assembly>
    <members>
        <member name="T:ECommons.Automation.Chat">
            <summary>
            A class containing chat functionality
            </summary>
        </member>
        <member name="M:ECommons.Automation.Chat.SendMessageUnsafe(System.Byte[])">
            <summary>
            <para>
            Send a given message to the chat box. <b>This can send chat to the server.</b>
            </para>
            <para>
            <b>This method is unsafe.</b> This method does no checking on your input and
            may send content to the server that the normal client could not. You must
            verify what you're sending and handle content and length to properly use
            this.
            </para>
            </summary>
            <param name="message">Message to send</param>
            <exception cref="T:System.InvalidOperationException">If the signature for this function could not be found</exception>
        </member>
        <member name="M:ECommons.Automation.Chat.SendMessage(System.String)">
            <summary>
            <para>
            Send a given message to the chat box. <b>This can send chat to the server.</b>
            </para>
            <para>
            This method is slightly less unsafe than <see cref="M:ECommons.Automation.Chat.SendMessageUnsafe(System.Byte[])"/>. It
            will throw exceptions for certain inputs that the client can't normally send,
            but it is still possible to make mistakes. Use with caution.
            </para>
            </summary>
            <param name="message">message to send</param>
            <exception cref="T:System.ArgumentException">If <paramref name="message"/> is empty, longer than 500 bytes in UTF-8, or contains invalid characters.</exception>
            <exception cref="T:System.InvalidOperationException">If the signature for this function could not be found</exception>
        </member>
        <member name="M:ECommons.Automation.Chat.SanitiseText(System.String)">
            <summary>
            <para>
            Sanitises a string by removing any invalid input.
            </para>
            <para>
            The result of this method is safe to use with
            <see cref="M:ECommons.Automation.Chat.SendMessage(System.String)"/>, provided that it is not empty or too
            long.
            </para>
            </summary>
            <param name="text">text to sanitise</param>
            <returns>sanitised text</returns>
            <exception cref="T:System.InvalidOperationException">If the signature for this function could not be found</exception>
        </member>
        <member name="T:ECommons.CircularBuffers.CircularBuffer`1">
            <inheritdoc/>
            <summary>
            Circular buffer.
            
            When writing to a full buffer:
            PushBack -> removes this[0] / Front()
            PushFront -> removes this[Size-1] / Back()
            
            this implementation is inspired by
            http://www.boost.org/doc/libs/1_53_0/libs/circular_buffer/doc/circular_buffer.html
            because I liked their interface.
            </summary>
        </member>
        <member name="F:ECommons.CircularBuffers.CircularBuffer`1._start">
            <summary>
            The _start. Index of the first element in buffer.
            </summary>
        </member>
        <member name="F:ECommons.CircularBuffers.CircularBuffer`1._end">
            <summary>
            The _end. Index after the last element in the buffer.
            </summary>
        </member>
        <member name="F:ECommons.CircularBuffers.CircularBuffer`1._size">
            <summary>
            The _size. Buffer size.
            </summary>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ECommons.CircularBuffers.CircularBuffer`1"/> class.
            
            </summary>
            <param name='capacity'>
            Buffer capacity. Must be positive.
            </param>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.#ctor(System.Int32,`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:ECommons.CircularBuffers.CircularBuffer`1"/> class.
            
            </summary>
            <param name='capacity'>
            Buffer capacity. Must be positive.
            </param>
            <param name='items'>
            Items to fill buffer with. Items length must be less than capacity.
            Suggestion: use Skip(x).Take(y).ToArray() to build this argument from
            any enumerable.
            </param>
        </member>
        <member name="P:ECommons.CircularBuffers.CircularBuffer`1.Capacity">
            <summary>
            Maximum capacity of the buffer. Elements pushed into the buffer after
            maximum capacity is reached (IsFull = true), will remove an element.
            </summary>
        </member>
        <member name="P:ECommons.CircularBuffers.CircularBuffer`1.IsFull">
            <summary>
            Boolean indicating if Circular is at full capacity.
            Adding more elements when the buffer is full will
            cause elements to be removed from the other end
            of the buffer.
            </summary>
        </member>
        <member name="P:ECommons.CircularBuffers.CircularBuffer`1.IsEmpty">
            <summary>
            True if has no elements.
            </summary>
        </member>
        <member name="P:ECommons.CircularBuffers.CircularBuffer`1.Size">
            <summary>
            Current buffer size (the number of elements that the buffer has).
            </summary>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.Front">
            <summary>
            Element at the front of the buffer - this[0].
            </summary>
            <returns>The value of the element of type T at the front of the buffer.</returns>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.Back">
            <summary>
            Element at the back of the buffer - this[Size - 1].
            </summary>
            <returns>The value of the element of type T at the back of the buffer.</returns>
        </member>
        <member name="P:ECommons.CircularBuffers.CircularBuffer`1.Item(System.Int32)">
            <summary>
            Index access to elements in buffer.
            Index does not loop around like when adding elements,
            valid interval is [0;Size[
            </summary>
            <param name="index">Index of element to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when index is outside of [; Size[ interval.</exception>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.PushBack(`0)">
            <summary>
            Pushes a new element to the back of the buffer. Back()/this[Size-1]
            will now return this element.
            
            When the buffer is full, the element at Front()/this[0] will be 
            popped to allow for this new element to fit.
            </summary>
            <param name="item">Item to push to the back of the buffer</param>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.PushFront(`0)">
            <summary>
            Pushes a new element to the front of the buffer. Front()/this[0]
            will now return this element.
            
            When the buffer is full, the element at Back()/this[Size-1] will be 
            popped to allow for this new element to fit.
            </summary>
            <param name="item">Item to push to the front of the buffer</param>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.PopBack">
            <summary>
            Removes the element at the back of the buffer. Decreasing the 
            Buffer size by 1.
            </summary>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.PopFront">
            <summary>
            Removes the element at the front of the buffer. Decreasing the 
            Buffer size by 1.
            </summary>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.Clear">
            <summary>
            Clears the contents of the array. Size = 0, Capacity is unchanged.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.ToArray">
            <summary>
            Copies the buffer contents to an array, according to the logical
            contents of the buffer (i.e. independent of the internal 
            order/contents)
            </summary>
            <returns>A new array with a copy of the buffer contents.</returns>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.ToArraySegments">
             <summary>
             Get the contents of the buffer as 2 ArraySegments.
             Respects the logical contents of the buffer, where
             each segment and items in each segment are ordered
             according to insertion.
            
             Fast: does not copy the array elements.
             Useful for methods like <c>Send(IList&lt;ArraySegment&lt;Byte&gt;&gt;)</c>.
             
             <remarks>Segments may be empty.</remarks>
             </summary>
             <returns>An IList with 2 segments corresponding to the buffer content.</returns>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this buffer.
            </summary>
            <returns>An enumerator that can be used to iterate this collection.</returns>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.Increment(System.Int32@)">
            <summary>
            Increments the provided index variable by one, wrapping
            around if necessary.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.Decrement(System.Int32@)">
            <summary>
            Decrements the provided index variable by one, wrapping
            around if necessary.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.InternalIndex(System.Int32)">
            <summary>
            Converts the index in the argument to an index in <code>_buffer</code>
            </summary>
            <returns>
            The transformed index.
            </returns>
            <param name='index'>
            External index.
            </param>
        </member>
        <member name="M:ECommons.GenericHelpers.Read``1(System.IntPtr)">
            <summary>
            Reads a generic type from a specified memory address.
            </summary>
            <typeparam name="T">An individual struct type of a class with an explicit StructLayout.LayoutKind attribute.</typeparam>
            <param name="memoryAddress">The memory address to read from.</param>
            <returns>The read in struct.</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.Read``1(System.IntPtr,System.Boolean)">
            <summary>
            Reads a generic type from a specified memory address.
            </summary>
            <typeparam name="T">An individual struct type of a class with an explicit StructLayout.LayoutKind attribute.</typeparam>
            <param name="memoryAddress">The memory address to read from.</param>
            <param name="marshal">Set this to true to enable struct marshalling.</param>
            <returns>The read in struct.</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.ReadRaw(System.IntPtr,System.Int32)">
            <summary>
            Reads a byte array from a specified memory address.
            </summary>
            <param name="memoryAddress">The memory address to read from.</param>
            <param name="length">The amount of bytes to read starting from the memoryAddress.</param>
            <returns>The read in byte array.</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.Read``1(System.IntPtr,System.Int32)">
            <summary>
            Reads a generic type array from a specified memory address.
            </summary>
            <typeparam name="T">An individual struct type of a class with an explicit StructLayout.LayoutKind attribute.</typeparam>
            <param name="memoryAddress">The memory address to read from.</param>
            <param name="arrayLength">The amount of array items to read.</param>
            <returns>The read in struct array.</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.Read``1(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Reads a generic type array from a specified memory address.
            </summary>
            <typeparam name="T">An individual struct type of a class with an explicit StructLayout.LayoutKind attribute.</typeparam>
            <param name="memoryAddress">The memory address to read from.</param>
            <param name="arrayLength">The amount of array items to read.</param>
            <param name="marshal">Set this to true to enable struct marshalling.</param>
            <returns>The read in struct array.</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.ReadRawNullTerminated(System.IntPtr)">
            <summary>
            Reads a null-terminated byte array from a specified memory address.
            </summary>
            <param name="memoryAddress">The memory address to read from.</param>
            <returns>The read in byte array.</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.Read``1(System.IntPtr,``0@)">
            <summary>
            Reads a generic type from a specified memory address.
            </summary>
            <typeparam name="T">An individual struct type of a class with an explicit StructLayout.LayoutKind attribute.</typeparam>
            <param name="memoryAddress">The memory address to read from.</param>
            <param name="value">Local variable to receive the read in struct.</param>
        </member>
        <member name="M:ECommons.GenericHelpers.Read``1(System.IntPtr,``0@,System.Boolean)">
            <summary>
            Reads a generic type from a specified memory address.
            </summary>
            <typeparam name="T">An individual struct type of a class with an explicit StructLayout.LayoutKind attribute.</typeparam>
            <param name="memoryAddress">The memory address to read from.</param>
            <param name="value">Local variable to receive the read in struct.</param>
            <param name="marshal">Set this to true to enable struct marshalling.</param>
        </member>
        <member name="M:ECommons.GenericHelpers.ReadRaw(System.IntPtr,System.Int32,System.Byte[]@)">
            <summary>
            Reads raw data from a specified memory address.
            </summary>
            <param name="memoryAddress">The memory address to read from.</param>
            <param name="length">The amount of bytes to read starting from the memoryAddress.</param>
            <param name="value">Local variable to receive the read in bytes.</param>
        </member>
        <member name="M:ECommons.GenericHelpers.Read``1(System.IntPtr,System.Int32,``0[]@)">
            <summary>
            Reads a generic type array from a specified memory address.
            </summary>
            <typeparam name="T">An individual struct type of a class with an explicit StructLayout.LayoutKind attribute.</typeparam>
            <param name="memoryAddress">The memory address to read from.</param>
            <param name="arrayLength">The amount of array items to read.</param>
            <param name="value">The read in struct array.</param>
        </member>
        <member name="M:ECommons.GenericHelpers.Read``1(System.IntPtr,System.Int32,System.Boolean,``0[]@)">
            <summary>
            Reads a generic type array from a specified memory address.
            </summary>
            <typeparam name="T">An individual struct type of a class with an explicit StructLayout.LayoutKind attribute.</typeparam>
            <param name="memoryAddress">The memory address to read from.</param>
            <param name="arrayLength">The amount of array items to read.</param>
            <param name="marshal">Set this to true to enable struct marshalling.</param>
            <param name="value">The read in struct array.</param>
        </member>
        <member name="M:ECommons.GenericHelpers.ReadStringNullTerminated(System.IntPtr)">
            <summary>
            Read a UTF-8 encoded string from a specified memory address.
            </summary>
            <remarks>
            Attention! If this is an SeString, use the <see cref="T:Dalamud.Game.Text.SeStringHandling.SeStringManager"/> to decode or the applicable helper method.
            </remarks>
            <param name="memoryAddress">The memory address to read from.</param>
            <returns>The read in string.</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.ReadStringNullTerminated(System.IntPtr,System.Text.Encoding)">
            <summary>
            Read a string with the given encoding from a specified memory address.
            </summary>
            <remarks>
            Attention! If this is an SeString, use the <see cref="T:Dalamud.Game.Text.SeStringHandling.SeStringManager"/> to decode or the applicable helper method.
            </remarks>
            <param name="memoryAddress">The memory address to read from.</param>
            <param name="encoding">The encoding to use to decode the string.</param>
            <returns>The read in string.</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.ReadString(System.IntPtr,System.Int32)">
            <summary>
            Read a UTF-8 encoded string from a specified memory address.
            </summary>
            <remarks>
            Attention! If this is an SeString, use the <see cref="T:Dalamud.Game.Text.SeStringHandling.SeStringManager"/> to decode or the applicable helper method.
            </remarks>
            <param name="memoryAddress">The memory address to read from.</param>
            <param name="maxLength">The maximum length of the string.</param>
            <returns>The read in string.</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.ReadString(System.IntPtr,System.Text.Encoding,System.Int32)">
            <summary>
            Read a string with the given encoding from a specified memory address.
            </summary>
            <remarks>
            Attention! If this is an SeString, use the <see cref="T:Dalamud.Game.Text.SeStringHandling.SeStringManager"/> to decode or the applicable helper method.
            </remarks>
            <param name="memoryAddress">The memory address to read from.</param>
            <param name="encoding">The encoding to use to decode the string.</param>
            <param name="maxLength">The maximum length of the string.</param>
            <returns>The read in string.</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.ReadSeStringNullTerminated(System.IntPtr)">
            <summary>
            Read a null-terminated SeString from a specified memory address.
            </summary>
            <param name="memoryAddress">The memory address to read from.</param>
            <returns>The read in string.</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.ReadSeString(System.IntPtr,System.Int32)">
            <summary>
            Read an SeString from a specified memory address.
            </summary>
            <param name="memoryAddress">The memory address to read from.</param>
            <param name="maxLength">The maximum length of the string.</param>
            <returns>The read in string.</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.ReadSeString(FFXIVClientStructs.FFXIV.Client.System.String.Utf8String*)">
            <summary>
            Read an SeString from a specified Utf8String structure.
            </summary>
            <param name="utf8String">The memory address to read from.</param>
            <returns>The read in string.</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.ReadStringNullTerminated(System.IntPtr,System.String@)">
            <summary>
            Read a UTF-8 encoded string from a specified memory address.
            </summary>
            <remarks>
            Attention! If this is an SeString, use the <see cref="T:Dalamud.Game.Text.SeStringHandling.SeStringManager"/> to decode or the applicable helper method.
            </remarks>
            <param name="memoryAddress">The memory address to read from.</param>
            <param name="value">The read in string.</param>
        </member>
        <member name="M:ECommons.GenericHelpers.ReadStringNullTerminated(System.IntPtr,System.Text.Encoding,System.String@)">
            <summary>
            Read a string with the given encoding from a specified memory address.
            </summary>
            <remarks>
            Attention! If this is an SeString, use the <see cref="T:Dalamud.Game.Text.SeStringHandling.SeStringManager"/> to decode or the applicable helper method.
            </remarks>
            <param name="memoryAddress">The memory address to read from.</param>
            <param name="encoding">The encoding to use to decode the string.</param>
            <param name="value">The read in string.</param>
        </member>
        <member name="M:ECommons.GenericHelpers.ReadString(System.IntPtr,System.String@,System.Int32)">
            <summary>
            Read a UTF-8 encoded string from a specified memory address.
            </summary>
            <remarks>
            Attention! If this is an SeString, use the <see cref="T:Dalamud.Game.Text.SeStringHandling.SeStringManager"/> to decode or the applicable helper method.
            </remarks>
            <param name="memoryAddress">The memory address to read from.</param>
            <param name="value">The read in string.</param>
            <param name="maxLength">The maximum length of the string.</param>
        </member>
        <member name="M:ECommons.GenericHelpers.ReadString(System.IntPtr,System.Text.Encoding,System.Int32,System.String@)">
            <summary>
            Read a string with the given encoding from a specified memory address.
            </summary>
            <remarks>
            Attention! If this is an SeString, use the <see cref="T:Dalamud.Game.Text.SeStringHandling.SeStringManager"/> to decode or the applicable helper method.
            </remarks>
            <param name="memoryAddress">The memory address to read from.</param>
            <param name="encoding">The encoding to use to decode the string.</param>
            <param name="maxLength">The maximum length of the string.</param>
            <param name="value">The read in string.</param>
        </member>
        <member name="M:ECommons.GenericHelpers.ReadSeStringNullTerminated(System.IntPtr,Dalamud.Game.Text.SeStringHandling.SeString@)">
            <summary>
            Read a null-terminated SeString from a specified memory address.
            </summary>
            <param name="memoryAddress">The memory address to read from.</param>
            <param name="value">The read in SeString.</param>
        </member>
        <member name="M:ECommons.GenericHelpers.ReadSeString(System.IntPtr,System.Int32,Dalamud.Game.Text.SeStringHandling.SeString@)">
            <summary>
            Read an SeString from a specified memory address.
            </summary>
            <param name="memoryAddress">The memory address to read from.</param>
            <param name="maxLength">The maximum length of the string.</param>
            <param name="value">The read in SeString.</param>
        </member>
        <member name="M:ECommons.GenericHelpers.ReadSeString(FFXIVClientStructs.FFXIV.Client.System.String.Utf8String*,Dalamud.Game.Text.SeStringHandling.SeString@)">
            <summary>
            Read an SeString from a specified Utf8String structure.
            </summary>
            <param name="utf8String">The memory address to read from.</param>
            <param name="value">The read in string.</param>
        </member>
        <member name="M:ECommons.GenericHelpers.Write``1(System.IntPtr,``0)">
            <summary>
            Writes a generic type to a specified memory address.
            </summary>
            <typeparam name="T">An individual struct type of a class with an explicit StructLayout.LayoutKind attribute.</typeparam>
            <param name="memoryAddress">The memory address to read from.</param>
            <param name="item">The item to write to the address.</param>
        </member>
        <member name="M:ECommons.GenericHelpers.Write``1(System.IntPtr,``0,System.Boolean)">
            <summary>
            Writes a generic type to a specified memory address.
            </summary>
            <typeparam name="T">An individual struct type of a class with an explicit StructLayout.LayoutKind attribute.</typeparam>
            <param name="memoryAddress">The memory address to read from.</param>
            <param name="item">The item to write to the address.</param>
            <param name="marshal">Set this to true to enable struct marshalling.</param>
        </member>
        <member name="M:ECommons.GenericHelpers.WriteRaw(System.IntPtr,System.Byte[])">
            <summary>
            Writes raw data to a specified memory address.
            </summary>
            <param name="memoryAddress">The memory address to read from.</param>
            <param name="data">The bytes to write to memoryAddress.</param>
        </member>
        <member name="M:ECommons.GenericHelpers.Write``1(System.IntPtr,``0[])">
            <summary>
            Writes a generic type array to a specified memory address.
            </summary>
            <typeparam name="T">An individual struct type of a class with an explicit StructLayout.LayoutKind attribute.</typeparam>
            <param name="memoryAddress">The memory address to write to.</param>
            <param name="items">The array of items to write to the address.</param>
        </member>
        <member name="M:ECommons.GenericHelpers.Write``1(System.IntPtr,``0[],System.Boolean)">
            <summary>
            Writes a generic type array to a specified memory address.
            </summary>
            <typeparam name="T">An individual struct type of a class with an explicit StructLayout.LayoutKind attribute.</typeparam>
            <param name="memoryAddress">The memory address to write to.</param>
            <param name="items">The array of items to write to the address.</param>
            <param name="marshal">Set this to true to enable struct marshalling.</param>
        </member>
        <member name="M:ECommons.GenericHelpers.WriteString(System.IntPtr,System.String)">
            <summary>
            Write a UTF-8 encoded string to a specified memory address.
            </summary>
            <remarks>
            Attention! If this is an SeString, use the <see cref="T:Dalamud.Game.Text.SeStringHandling.SeStringManager"/> to encode or the applicable helper method.
            </remarks>
            <param name="memoryAddress">The memory address to write to.</param>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:ECommons.GenericHelpers.WriteString(System.IntPtr,System.String,System.Text.Encoding)">
            <summary>
            Write a string with the given encoding to a specified memory address.
            </summary>
            <remarks>
            Attention! If this is an SeString, use the <see cref="T:Dalamud.Game.Text.SeStringHandling.SeStringManager"/> to encode or the applicable helper method.
            </remarks>
            <param name="memoryAddress">The memory address to write to.</param>
            <param name="value">The string to write.</param>
            <param name="encoding">The encoding to use.</param>
        </member>
        <member name="M:ECommons.GenericHelpers.WriteSeString(System.IntPtr,Dalamud.Game.Text.SeStringHandling.SeString)">
            <summary>
            Write an SeString to a specified memory address.
            </summary>
            <param name="memoryAddress">The memory address to write to.</param>
            <param name="value">The SeString to write.</param>
        </member>
        <member name="M:ECommons.GenericHelpers.SizeOf``1">
            <summary>
            Returns the size of a specific primitive or struct type.
            </summary>
            <typeparam name="T">An individual struct type of a class with an explicit StructLayout.LayoutKind attribute.</typeparam>
            <returns>The size of the primitive or struct.</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.SizeOf``1(System.Boolean)">
            <summary>
            Returns the size of a specific primitive or struct type.
            </summary>
            <typeparam name="T">An individual struct type of a class with an explicit StructLayout.LayoutKind attribute.</typeparam>
            <param name="marshal">If set to true; will return the size of an element after marshalling.</param>
            <returns>The size of the primitive or struct.</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.SizeOf``1(System.Int32)">
            <summary>
            Returns the size of a specific primitive or struct type.
            </summary>
            <typeparam name="T">An individual struct type of a class with an explicit StructLayout.LayoutKind attribute.</typeparam>
            <param name="elementCount">The number of array elements present.</param>
            <returns>The size of the primitive or struct array.</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.SizeOf``1(System.Int32,System.Boolean)">
            <summary>
            Returns the size of a specific primitive or struct type.
            </summary>
            <typeparam name="T">An individual struct type of a class with an explicit StructLayout.LayoutKind attribute.</typeparam>
            <param name="elementCount">The number of array elements present.</param>
            <param name="marshal">If set to true; will return the size of an element after marshalling.</param>
            <returns>The size of the primitive or struct array.</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.GameAllocateUi(System.UInt64,System.UInt64)">
            <summary>
            Allocate memory in the game's UI memory space.
            </summary>
            <param name="size">Amount of bytes to allocate.</param>
            <param name="alignment">The alignment of the allocation.</param>
            <returns>Pointer to the allocated region.</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.GameAllocateDefault(System.UInt64,System.UInt64)">
            <summary>
            Allocate memory in the game's default memory space.
            </summary>
            <param name="size">Amount of bytes to allocate.</param>
            <param name="alignment">The alignment of the allocation.</param>
            <returns>Pointer to the allocated region.</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.GameAllocateAnimation(System.UInt64,System.UInt64)">
            <summary>
            Allocate memory in the game's animation memory space.
            </summary>
            <param name="size">Amount of bytes to allocate.</param>
            <param name="alignment">The alignment of the allocation.</param>
            <returns>Pointer to the allocated region.</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.GameAllocateApricot(System.UInt64,System.UInt64)">
            <summary>
            Allocate memory in the game's apricot memory space.
            </summary>
            <param name="size">Amount of bytes to allocate.</param>
            <param name="alignment">The alignment of the allocation.</param>
            <returns>Pointer to the allocated region.</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.GameAllocateSound(System.UInt64,System.UInt64)">
            <summary>
            Allocate memory in the game's sound memory space.
            </summary>
            <param name="size">Amount of bytes to allocate.</param>
            <param name="alignment">The alignment of the allocation.</param>
            <returns>Pointer to the allocated region.</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.GameFree(System.IntPtr@,System.UInt64)">
            <summary>
            Free memory in the game's memory space.
            </summary>
            <remarks>The memory you are freeing must be allocated with game allocators.</remarks>
            <param name="ptr">Position at which the memory to be freed is located.</param>
            <param name="size">Amount of bytes to free.</param>
        </member>
        <member name="M:ECommons.GenericHelpers.NullTerminate(System.Byte[])">
            <summary>
            Null-terminate a byte array.
            </summary>
            <param name="bytes">The byte array to terminate.</param>
            <returns>The terminated byte array.</returns>
        </member>
        <member name="M:ECommons.Interop.WindowFunctions.ApplicationIsActivated">
            <summary>Returns true if the current application has focus, false otherwise</summary>
        </member>
        <member name="T:ECommons.MathHelpers.Vector2Double">
            <summary>
            A structure encapsulating two Double precision doubleing point values and provides hardware accelerated methods.
            </summary>
        </member>
        <member name="P:ECommons.MathHelpers.Vector2Double.Zero">
            <summary>
            Returns the vector (0,0).
            </summary>
        </member>
        <member name="P:ECommons.MathHelpers.Vector2Double.One">
            <summary>
            Returns the vector (1,1).
            </summary>
        </member>
        <member name="P:ECommons.MathHelpers.Vector2Double.UnitX">
            <summary>
            Returns the vector (1,0).
            </summary>
        </member>
        <member name="P:ECommons.MathHelpers.Vector2Double.UnitY">
            <summary>
            Returns the vector (0,1).
            </summary>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.Equals(System.Object)">
            <summary>
            Returns a boolean indicating whether the given Object is equal to this Vector2 instance.
            </summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this Vector2; False otherwise.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.ToString">
            <summary>
            Returns a String representing this Vector2 instance.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.ToString(System.String)">
            <summary>
            Returns a String representing this Vector2 instance, using the specified format to format individual elements.
            </summary>
            <param name="format">The format of individual elements.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a String representing this Vector2 instance, using the specified format to format individual elements 
            and the given IFormatProvider.
            </summary>
            <param name="format">The format of individual elements.</param>
            <param name="formatProvider">The format provider to use when formatting elements.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.Length">
            <summary>
            Returns the length of the vector.
            </summary>
            <returns>The vector's length.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.LengthSquared">
            <summary>
            Returns the length of the vector squared. This operation is cheaper than Length().
            </summary>
            <returns>The vector's length squared.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.Distance(ECommons.MathHelpers.Vector2Double,ECommons.MathHelpers.Vector2Double)">
            <summary>
            Returns the Euclidean distance between the two given points.
            </summary>
            <param name="value1">The first point.</param>
            <param name="value2">The second point.</param>
            <returns>The distance.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.DistanceSquared(ECommons.MathHelpers.Vector2Double,ECommons.MathHelpers.Vector2Double)">
            <summary>
            Returns the Euclidean distance squared between the two given points.
            </summary>
            <param name="value1">The first point.</param>
            <param name="value2">The second point.</param>
            <returns>The distance squared.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.Normalize(ECommons.MathHelpers.Vector2Double)">
            <summary>
            Returns a vector with the same direction as the given vector, but with a length of 1.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.Reflect(ECommons.MathHelpers.Vector2Double,ECommons.MathHelpers.Vector2Double)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">The normal of the surface being reflected off.</param>
            <returns>The reflected vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.Clamp(ECommons.MathHelpers.Vector2Double,ECommons.MathHelpers.Vector2Double,ECommons.MathHelpers.Vector2Double)">
            <summary>
            Restricts a vector between a min and max value.
            </summary>
            <param name="value1">The source vector.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.Lerp(ECommons.MathHelpers.Vector2Double,ECommons.MathHelpers.Vector2Double,System.Double)">
            <summary>
            Linearly interpolates between two vectors based on the given weighting.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of the second source vector.</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.Transform(ECommons.MathHelpers.Vector2Double,System.Numerics.Matrix3x2)">
            <summary>
            Transforms a vector by the given matrix.
            </summary>
            <param name="position">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.Transform(ECommons.MathHelpers.Vector2Double,System.Numerics.Matrix4x4)">
            <summary>
            Transforms a vector by the given matrix.
            </summary>
            <param name="position">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.TransformNormal(ECommons.MathHelpers.Vector2Double,System.Numerics.Matrix3x2)">
            <summary>
            Transforms a vector normal by the given matrix.
            </summary>
            <param name="normal">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.TransformNormal(ECommons.MathHelpers.Vector2Double,System.Numerics.Matrix4x4)">
            <summary>
            Transforms a vector normal by the given matrix.
            </summary>
            <param name="normal">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.Transform(ECommons.MathHelpers.Vector2Double,System.Numerics.Quaternion)">
            <summary>
            Transforms a vector by the given Quaternion rotation value.
            </summary>
            <param name="value">The source vector to be rotated.</param>
            <param name="rotation">The rotation to apply.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.Add(ECommons.MathHelpers.Vector2Double,ECommons.MathHelpers.Vector2Double)">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The summed vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.Subtract(ECommons.MathHelpers.Vector2Double,ECommons.MathHelpers.Vector2Double)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The difference vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.Multiply(ECommons.MathHelpers.Vector2Double,ECommons.MathHelpers.Vector2Double)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.Multiply(ECommons.MathHelpers.Vector2Double,System.Double)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The source vector.</param>
            <param name="right">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.Multiply(System.Double,ECommons.MathHelpers.Vector2Double)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The source vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.Divide(ECommons.MathHelpers.Vector2Double,ECommons.MathHelpers.Vector2Double)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The vector resulting from the division.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.Divide(ECommons.MathHelpers.Vector2Double,System.Double)">
            <summary>
            Divides the vector by the given scalar.
            </summary>
            <param name="left">The source vector.</param>
            <param name="divisor">The scalar value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.Negate(ECommons.MathHelpers.Vector2Double)">
            <summary>
            Negates a given vector.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="F:ECommons.MathHelpers.Vector2Double.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:ECommons.MathHelpers.Vector2Double.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.#ctor(System.Double)">
            <summary>
            Constructs a vector whose elements are all the Double specified value.
            </summary>
            <param name="value">The element to fill the vector with.</param>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a vector with the given individual elements.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.CopyTo(System.Double[])">
            <summary>
            Copies the contents of the vector into the given array.
            </summary>
            <param name="array">The destination array.</param>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.CopyTo(System.Double[],System.Int32)">
            <summary>
            Copies the contents of the vector into the given array, starting from the given index.
            </summary>
            <exception cref="T:System.ArgumentNullException">If array is null.</exception>
            <exception cref="T:System.RankException">If array is multidimensional.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is greater than end of the array or index is less than zero.</exception>
            <exception cref="T:System.ArgumentException">If number of elements in source vector is greater than those available in destination array
            or if there are not enough elements to copy.</exception>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.Equals(ECommons.MathHelpers.Vector2Double)">
            <summary>
            Returns a boolean indicating whether the given Vector2 is equal to this Vector2 instance.
            </summary>
            <param name="other">The Vector2 to compare this instance to.</param>
            <returns>True if the other Vector2 is equal to this instance; False otherwise.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.Dot(ECommons.MathHelpers.Vector2Double,ECommons.MathHelpers.Vector2Double)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.Min(ECommons.MathHelpers.Vector2Double,ECommons.MathHelpers.Vector2Double)">
            <summary>
            Returns a vector whose elements are the minimum of each of the pairs of elements in the two source vectors.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>The minimized vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.Max(ECommons.MathHelpers.Vector2Double,ECommons.MathHelpers.Vector2Double)">
            <summary>
            Returns a vector whose elements are the maximum of each of the pairs of elements in the two source vectors
            </summary>
            <param name="value1">The first source vector</param>
            <param name="value2">The second source vector</param>
            <returns>The maximized vector</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.Abs(ECommons.MathHelpers.Vector2Double)">
            <summary>
            Returns a vector whose elements are the absolute values of each of the source vector's elements.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The absolute value vector.</returns>        
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.SquareRoot(ECommons.MathHelpers.Vector2Double)">
            <summary>
            Returns a vector whose elements are the square root of each of the source vector's elements.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The square root vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.op_Addition(ECommons.MathHelpers.Vector2Double,ECommons.MathHelpers.Vector2Double)">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The summed vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.op_Subtraction(ECommons.MathHelpers.Vector2Double,ECommons.MathHelpers.Vector2Double)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The difference vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.op_Multiply(ECommons.MathHelpers.Vector2Double,ECommons.MathHelpers.Vector2Double)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.op_Multiply(System.Double,ECommons.MathHelpers.Vector2Double)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The source vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.op_Multiply(ECommons.MathHelpers.Vector2Double,System.Double)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The source vector.</param>
            <param name="right">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.op_Division(ECommons.MathHelpers.Vector2Double,ECommons.MathHelpers.Vector2Double)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The vector resulting from the division.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.op_Division(ECommons.MathHelpers.Vector2Double,System.Double)">
            <summary>
            Divides the vector by the given scalar.
            </summary>
            <param name="value1">The source vector.</param>
            <param name="value2">The scalar value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.op_UnaryNegation(ECommons.MathHelpers.Vector2Double)">
            <summary>
            Negates a given vector.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.op_Equality(ECommons.MathHelpers.Vector2Double,ECommons.MathHelpers.Vector2Double)">
            <summary>
            Returns a boolean indicating whether the two given vectors are equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are equal; False otherwise.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector2Double.op_Inequality(ECommons.MathHelpers.Vector2Double,ECommons.MathHelpers.Vector2Double)">
            <summary>
            Returns a boolean indicating whether the two given vectors are not equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are not equal; False if they are equal.</returns>
        </member>
        <member name="T:ECommons.MathHelpers.Vector3Double">
            <summary>
            A structure encapsulating three Double precision doubleing point values and provides hardware accelerated methods.
            </summary>
        </member>
        <member name="P:ECommons.MathHelpers.Vector3Double.Zero">
            <summary>
            Returns the vector (0,0,0).
            </summary>
        </member>
        <member name="P:ECommons.MathHelpers.Vector3Double.One">
            <summary>
            Returns the vector (1,1,1).
            </summary>
        </member>
        <member name="P:ECommons.MathHelpers.Vector3Double.UnitX">
            <summary>
            Returns the vector (1,0,0).
            </summary>
        </member>
        <member name="P:ECommons.MathHelpers.Vector3Double.UnitY">
            <summary>
            Returns the vector (0,1,0).
            </summary>
        </member>
        <member name="P:ECommons.MathHelpers.Vector3Double.UnitZ">
            <summary>
            Returns the vector (0,0,1).
            </summary>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.Equals(System.Object)">
            <summary>
            Returns a boolean indicating whether the given Object is equal to this Vector3Double instance.
            </summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this Vector3Double; False otherwise.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.ToString">
            <summary>
            Returns a String representing this Vector3Double instance.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.ToString(System.String)">
            <summary>
            Returns a String representing this Vector3Double instance, using the specified format to format individual elements.
            </summary>
            <param name="format">The format of individual elements.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a String representing this Vector3Double instance, using the specified format to format individual elements 
            and the given IFormatProvider.
            </summary>
            <param name="format">The format of individual elements.</param>
            <param name="formatProvider">The format provider to use when formatting elements.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.Length">
            <summary>
            Returns the length of the vector.
            </summary>
            <returns>The vector's length.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.LengthSquared">
            <summary>
            Returns the length of the vector squared. This operation is cheaper than Length().
            </summary>
            <returns>The vector's length squared.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.Distance(ECommons.MathHelpers.Vector3Double,ECommons.MathHelpers.Vector3Double)">
            <summary>
            Returns the Euclidean distance between the two given points.
            </summary>
            <param name="value1">The first point.</param>
            <param name="value2">The second point.</param>
            <returns>The distance.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.DistanceSquared(ECommons.MathHelpers.Vector3Double,ECommons.MathHelpers.Vector3Double)">
            <summary>
            Returns the Euclidean distance squared between the two given points.
            </summary>
            <param name="value1">The first point.</param>
            <param name="value2">The second point.</param>
            <returns>The distance squared.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.Normalize(ECommons.MathHelpers.Vector3Double)">
            <summary>
            Returns a vector with the same direction as the given vector, but with a length of 1.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.Cross(ECommons.MathHelpers.Vector3Double,ECommons.MathHelpers.Vector3Double)">
            <summary>
            Computes the cross product of two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The cross product.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.Reflect(ECommons.MathHelpers.Vector3Double,ECommons.MathHelpers.Vector3Double)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">The normal of the surface being reflected off.</param>
            <returns>The reflected vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.Clamp(ECommons.MathHelpers.Vector3Double,ECommons.MathHelpers.Vector3Double,ECommons.MathHelpers.Vector3Double)">
            <summary>
            Restricts a vector between a min and max value.
            </summary>
            <param name="value1">The source vector.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The restricted vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.Lerp(ECommons.MathHelpers.Vector3Double,ECommons.MathHelpers.Vector3Double,System.Double)">
            <summary>
            Linearly interpolates between two vectors based on the given weighting.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of the second source vector.</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.Transform(ECommons.MathHelpers.Vector3Double,System.Numerics.Matrix4x4)">
            <summary>
            Transforms a vector by the given matrix.
            </summary>
            <param name="position">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.TransformNormal(ECommons.MathHelpers.Vector3Double,System.Numerics.Matrix4x4)">
            <summary>
            Transforms a vector normal by the given matrix.
            </summary>
            <param name="normal">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.Transform(ECommons.MathHelpers.Vector3Double,System.Numerics.Quaternion)">
            <summary>
            Transforms a vector by the given Quaternion rotation value.
            </summary>
            <param name="value">The source vector to be rotated.</param>
            <param name="rotation">The rotation to apply.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.Add(ECommons.MathHelpers.Vector3Double,ECommons.MathHelpers.Vector3Double)">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The summed vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.Subtract(ECommons.MathHelpers.Vector3Double,ECommons.MathHelpers.Vector3Double)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The difference vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.Multiply(ECommons.MathHelpers.Vector3Double,ECommons.MathHelpers.Vector3Double)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.Multiply(ECommons.MathHelpers.Vector3Double,System.Double)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The source vector.</param>
            <param name="right">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.Multiply(System.Double,ECommons.MathHelpers.Vector3Double)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The source vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.Divide(ECommons.MathHelpers.Vector3Double,ECommons.MathHelpers.Vector3Double)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The vector resulting from the division.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.Divide(ECommons.MathHelpers.Vector3Double,System.Double)">
            <summary>
            Divides the vector by the given scalar.
            </summary>
            <param name="left">The source vector.</param>
            <param name="divisor">The scalar value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.Negate(ECommons.MathHelpers.Vector3Double)">
            <summary>
            Negates a given vector.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="F:ECommons.MathHelpers.Vector3Double.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:ECommons.MathHelpers.Vector3Double.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:ECommons.MathHelpers.Vector3Double.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.#ctor(System.Double)">
            <summary>
            Constructs a vector whose elements are all the Double specified value.
            </summary>
            <param name="value">The element to fill the vector with.</param>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.#ctor(ECommons.MathHelpers.Vector2Double,System.Double)">
            <summary>
            Constructs a Vector3Double from the given Vector2 and a third value.
            </summary>
            <param name="value">The Vector to extract X and Y components from.</param>
            <param name="z">The Z component.</param>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a vector with the given individual elements.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.CopyTo(System.Double[])">
            <summary>
            Copies the contents of the vector into the given array.
            </summary>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.CopyTo(System.Double[],System.Int32)">
            <summary>
            Copies the contents of the vector into the given array, starting from index.
            </summary>
            <exception cref="T:System.ArgumentNullException">If array is null.</exception>
            <exception cref="T:System.RankException">If array is multidimensional.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is greater than end of the array or index is less than zero.</exception>
            <exception cref="T:System.ArgumentException">If number of elements in source vector is greater than those available in destination array.</exception>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.Equals(ECommons.MathHelpers.Vector3Double)">
            <summary>
            Returns a boolean indicating whether the given Vector3Double is equal to this Vector3Double instance.
            </summary>
            <param name="other">The Vector3Double to compare this instance to.</param>
            <returns>True if the other Vector3Double is equal to this instance; False otherwise.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.Dot(ECommons.MathHelpers.Vector3Double,ECommons.MathHelpers.Vector3Double)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.Min(ECommons.MathHelpers.Vector3Double,ECommons.MathHelpers.Vector3Double)">
            <summary>
            Returns a vector whose elements are the minimum of each of the pairs of elements in the two source vectors.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>The minimized vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.Max(ECommons.MathHelpers.Vector3Double,ECommons.MathHelpers.Vector3Double)">
            <summary>
            Returns a vector whose elements are the maximum of each of the pairs of elements in the two source vectors.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>The maximized vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.Abs(ECommons.MathHelpers.Vector3Double)">
            <summary>
            Returns a vector whose elements are the absolute values of each of the source vector's elements.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The absolute value vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.SquareRoot(ECommons.MathHelpers.Vector3Double)">
            <summary>
            Returns a vector whose elements are the square root of each of the source vector's elements.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The square root vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.op_Addition(ECommons.MathHelpers.Vector3Double,ECommons.MathHelpers.Vector3Double)">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The summed vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.op_Subtraction(ECommons.MathHelpers.Vector3Double,ECommons.MathHelpers.Vector3Double)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The difference vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.op_Multiply(ECommons.MathHelpers.Vector3Double,ECommons.MathHelpers.Vector3Double)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.op_Multiply(ECommons.MathHelpers.Vector3Double,System.Double)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The source vector.</param>
            <param name="right">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.op_Multiply(System.Double,ECommons.MathHelpers.Vector3Double)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The source vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.op_Division(ECommons.MathHelpers.Vector3Double,ECommons.MathHelpers.Vector3Double)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The vector resulting from the division.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.op_Division(ECommons.MathHelpers.Vector3Double,System.Double)">
            <summary>
            Divides the vector by the given scalar.
            </summary>
            <param name="value1">The source vector.</param>
            <param name="value2">The scalar value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.op_UnaryNegation(ECommons.MathHelpers.Vector3Double)">
            <summary>
            Negates a given vector.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.op_Equality(ECommons.MathHelpers.Vector3Double,ECommons.MathHelpers.Vector3Double)">
            <summary>
            Returns a boolean indicating whether the two given vectors are equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are equal; False otherwise.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.Vector3Double.op_Inequality(ECommons.MathHelpers.Vector3Double,ECommons.MathHelpers.Vector3Double)">
            <summary>
            Returns a boolean indicating whether the two given vectors are not equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are not equal; False if they are equal.</returns>
        </member>
        <member name="T:ECommons.SplatoonAPI.ElementType">
            <summary>
            0: Object at fixed coordinates |
            1: Object relative to actor position | 
            2: Line between two fixed coordinates | 
            3: Line relative to object pos | 
            4: Cone relative to object position |
            5: Cone at fixed coordinates
            </summary>
        </member>
        <member name="T:ECommons.SplatoonAPI.RefActorComparisonType">
            <summary>
            0: Name |
            1: Model ID |
            2: Object ID |
            3: Data ID | 
            4: NPC ID |
            5: Placeholder |
            6: Name ID | 
            7: VFX Path
            </summary>
        </member>
        <member name="T:ECommons.SplatoonAPI.RefActorType">
            0: Game object with specific name |
            1: Self |
            2: Targeted enemy
        </member>
    </members>
</doc>
